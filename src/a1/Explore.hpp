#ifndef EXPLORE_HPP
#define EXPLORE_HPP

#include <vector>
#include <algorithm>

#include <math/point.hpp>
#include <mapping/occupancy_grid.hpp>
#include <mapping/occupancy_grid_utils.hpp>
#include <lcmtypes/maebot_processed_laser_scan_t.hpp>

namespace eecs467 {

class Explore {
private:
	std::vector<Point<int>> _wayPoints;

public:
	Explore();

	Point<int> getNextWayPoint(const OccupancyGrid& grid, const Point<double>& currPos);

	void clearAllPaths();

private:
	/**
	 * @brief generates a configuration space
	 * @param grid reference to occupancy grid
	 * @param radius radius of the robot
	 * @return configuration space
	 */
	OccupancyGrid getConfigurationSpace(const OccupancyGrid&, float radius);

	/**
	 * @brief takes in a path generated by breadthFirstSearch and picks
	 * important waypoints from it (aka corners and whatnot)
	 * @param grid reference to our configuration space
	 * @param points path where the first element is the destination and the last element is the start
	 * @return specific points from the path where the first element is the destination
	 * and the last element is the start
	 */
	std::vector<Point<int>> pickWayPoints(const OccupancyGrid& grid, 
		const std::vector<Point<int>>& points);

	/**
	 * @brief generates a vector of points consisting of 
	 * adjacent cells that represent a path from our position 
	 * to the nearest unknown location
	 * @param grid const ref to a configuration space
	 * @return path where the first element is the destination and the last element is the start
	 */
	std::vector<Point<int>> breadthFirstSearch(OccupancyGrid& grid, 
		const Point<int>& currPos);

};

}

#endif /* EXPLORE_HPP */
